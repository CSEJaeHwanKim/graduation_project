MASTER
#include <XBee.h>
XBee xbee = XBee();
int digitalPin=10;
int rssiDur;
int led = 12;
int rnodeid;
int rtemp;
int rhumi;
int node[10]={0};
int node1[10]={0};
XBeeResponse response = XBeeResponse();
Rx16Response rx16 = Rx16Response();
void setup() 
{
  Serial.begin(9600);
  xbee.begin(9600);
}

void loop() 
{
   xbee.readPacket();
  if (xbee.getResponse().isAvailable()) 
  {
    if (xbee.getResponse().getApiId() == RX_16_RESPONSE) 
    {
      xbee.getResponse().getRx16Response(rx16);
      if(rx16.getData(0)==7)
      {
        for (int i = 0; i < rx16.getDataLength(); i++) 
        {
          node[i]= rx16.getData(i);
        }
         /*Serial.print("nodeid= ");
         Serial.print(node[0]);*/
         Serial.print("TEMPER = ");
         Serial.print(node[1]);
         Serial.print("HUMI = ");
         Serial.print(node[2]);
         delay(3000);
      }
      else if(rx16.getData(0)==9)
      {
        for (int a = 0; a < rx16.getDataLength(); a++) 
        {
          node1[a]= rx16.getData(a);
        }
        Serial.print("CO2 = ");
        Serial.print(node1[1]);
        Serial.print(" ");
        delay(3000);
      }
      else if(rx16.getData(0)==8)
      {
        Serial.print("RSSI VALUE -> ");
        Serial.println(rx16.getRssi());
        delay(3000);
      }
    }
  }
}






RSSI
#include <XBee.h>
#define DESTINATION (0x0000)
XBee xbee = XBee();
int nodeid = 8;
void setup()
{
  Serial.begin(9600);
  xbee.begin(9600);
}

void loop()
{
        uint8_t payload[] = {nodeid};
        Tx16Request tx16 = Tx16Request(DESTINATION, payload, sizeof(payload));
	xbee.send(tx16);
        Serial.println();
        delay(3000);
}







TEMPERATURE_HUMINITY
#include<DHT11.h>
#include <XBee.h>
#define DESTINATION (0x0000)
XBee xbee = XBee();
int temppin=2;
DHT11 dht11(temppin);
int nodeid = 7;
void setup() 
{
  Serial.begin(9600);
  xbee.begin(9600); 
}
 
void loop() 
{
  float temp,humi;
  int temp_1,humi_1;
  if(dht11.read(humi, temp)== 0)  
  {
    temp_1 = (int) temp;    
    humi_1 = (int) humi;
  }
  uint8_t payload[]={nodeid,temp_1,humi_1};
  Tx16Request tx16 = Tx16Request(DESTINATION, payload, sizeof(payload)); 
  xbee.send(tx16);
  delay(3000);
}








CO2
#include <XBee.h>
#define MG_PIN (0)
#define DC_GAIN (8.5)  
#define READ_SAMPLE_INTERVAL (50)   
#define READ_SAMPLE_TIMES (5)
#define ZERO_POINT_VOLTAGE (0.220)
#define REACTION_VOLTGAE (0.020)
#define DESTINATION (0x0000)
XBee xbee = XBee();
float CO2Curve[3] = {2.602,ZERO_POINT_VOLTAGE,(REACTION_VOLTGAE/(2.602-3))};
int nodeid = 9;
void setup()
{
    Serial.begin(9600);      
    xbee.begin(9600);   
}
 
void loop()
{
    int percentage;
    float volts;
    volts = MGRead(MG_PIN);
    percentage = MGGetPercentage(volts,CO2Curve);
     Serial.print("CO2:");
    if (percentage == -1)
    {
      Serial.print( "<400" );
    } 
     
    else 
    {
      Serial.print(percentage);
    }
    Serial.print( "ppm" );  
    Serial.print("\n");
    uint8_t payload[]={nodeid, percentage};
    Tx16Request tx16 = Tx16Request(DESTINATION, payload, sizeof(payload)); 
    xbee.send(tx16);
    delay(3000);
}

float MGRead(int mg_pin)
{
    int i;
    float v=0;
    for (i=0;i<READ_SAMPLE_TIMES;i++) 
    {
        v += analogRead(mg_pin);
        delay(READ_SAMPLE_INTERVAL);
    }
    v = (v/READ_SAMPLE_TIMES) *5/1024 ;
    return v;  
}
int  MGGetPercentage(float volts, float *pcurve)
{
   if ((volts/DC_GAIN )>=ZERO_POINT_VOLTAGE) 
   {
      return -1;
   } 
   else 
   { 
      return pow(10, ((volts/DC_GAIN)-pcurve[1])/pcurve[2]+pcurve[0]);
   }
}
